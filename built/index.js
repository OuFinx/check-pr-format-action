"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core = require("@actions/core");
var github = require("@actions/github");
function checkPullRequestFormat() {
    var workFlowPaylod = github.context.payload;
    var pullRequest = github.context.payload.pull_request;
    // Log the actual workflow payload for debugging
    core.info("Workflow payload " + JSON.stringify(workFlowPaylod));
    var body = pullRequest === null || pullRequest === void 0 ? void 0 : pullRequest.body;
    if (!!body === false) {
        core.info("No pull request body. ");
        return;
    }
    var checks = core.getInput('checks');
    if (!!checks === false) {
        core.setOutput('status', false);
        core.setFailed('No checks.');
    }
    else {
        // Checks are a JSON array.
        var parsedChecks = JSON.parse(checks);
        var result = _checkPullRequestFormat(parsedChecks, body);
        if (result) {
            core.info("PR Format checks passed.");
            core.setOutput('status', true);
        }
        else {
            core.info("PR Format checks failed.");
            core.setOutput('status', false);
            core.setFailed("The pull request " + body + " does not match one of the following checks " + checks);
        }
    }
}
function _checkPullRequestFormat(expressions, body) {
    var lines = body.split(RegExp('\r?\n'));
    var compiled = [];
    var matches = 0;
    // Indexes
    var i = 0;
    var j = 0;
    // Compile Expressions
    for (i = 0; i < expressions.length; i += 1) {
        compiled[i] = new RegExp(expressions[i]);
    }
    // Validate
    for (i = 0; i < lines.length; i += 1) {
        var matched = false;
        for (j = 0; j < compiled.length && matched === false; j += 1) {
            matched = compiled[j].test(lines[i]);
        }
        if (matched) {
            matches += 1;
        }
    }
    return compiled.length === matches;
}
(function () {
    try {
        checkPullRequestFormat();
    }
    catch (error) {
        core.setFailed("Unable to validate pull request body " + error);
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBdUM7QUFDdkMsd0NBQTJDO0FBRTNDLFNBQVMsc0JBQXNCO0lBQzdCLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzlDLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUV4RCxnREFBZ0Q7SUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUcsQ0FBQyxDQUFDO0lBRWhFLElBQU0sSUFBSSxHQUFHLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxJQUFJLENBQUM7SUFDL0IsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDcEMsT0FBTztLQUNSO0lBRUQsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNyQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7S0FDOUI7U0FBTTtRQUNMLDJCQUEyQjtRQUMzQixJQUFJLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBYSxDQUFDO1FBQ2xELElBQU0sTUFBTSxHQUFHLHVCQUF1QixDQUFDLFlBQVksRUFBRSxJQUFNLENBQUMsQ0FBQztRQUM3RCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNoQzthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLElBQUksQ0FBQyxTQUFTLENBQUMsc0JBQW9CLElBQUksb0RBQStDLE1BQVEsQ0FBQyxDQUFDO1NBQ2pHO0tBQ0Y7QUFDSCxDQUFDO0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxXQUFxQixFQUFFLElBQVk7SUFDbEUsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUMxQyxJQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDcEIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLFVBQVU7SUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDVixzQkFBc0I7SUFDdEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDMUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzFDO0lBQ0QsV0FBVztJQUNYLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ3BDLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLElBQUksT0FBTyxLQUFLLEtBQUssRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVELE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsSUFBSSxPQUFPLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQyxDQUFDO1NBQ2Q7S0FDRjtJQUNELE9BQU8sUUFBUSxDQUFDLE1BQU0sS0FBSyxPQUFPLENBQUM7QUFDckMsQ0FBQztBQUdELENBQUM7SUFDQyxJQUFJO1FBQ0Ysc0JBQXNCLEVBQUUsQ0FBQztLQUMxQjtJQUFDLE9BQU8sS0FBSyxFQUFFO1FBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQywwQ0FBd0MsS0FBTyxDQUFDLENBQUM7S0FDakU7QUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvcmUgPSByZXF1aXJlKCdAYWN0aW9ucy9jb3JlJyk7XG5pbXBvcnQgZ2l0aHViID0gcmVxdWlyZSgnQGFjdGlvbnMvZ2l0aHViJyk7XG5cbmZ1bmN0aW9uIGNoZWNrUHVsbFJlcXVlc3RGb3JtYXQoKTogdm9pZCB7XG4gIGNvbnN0IHdvcmtGbG93UGF5bG9kID0gZ2l0aHViLmNvbnRleHQucGF5bG9hZDsgIFxuICBjb25zdCBwdWxsUmVxdWVzdCA9IGdpdGh1Yi5jb250ZXh0LnBheWxvYWQucHVsbF9yZXF1ZXN0O1xuXG4gIC8vIExvZyB0aGUgYWN0dWFsIHdvcmtmbG93IHBheWxvYWQgZm9yIGRlYnVnZ2luZ1xuICBjb3JlLmluZm8oYFdvcmtmbG93IHBheWxvYWQgJHtKU09OLnN0cmluZ2lmeSh3b3JrRmxvd1BheWxvZCl9YCk7XG5cbiAgY29uc3QgYm9keSA9IHB1bGxSZXF1ZXN0Py5ib2R5O1xuICBpZiAoISFib2R5ID09PSBmYWxzZSkge1xuICAgIGNvcmUuaW5mbyhgTm8gcHVsbCByZXF1ZXN0IGJvZHkuIGApO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBjaGVja3MgPSBjb3JlLmdldElucHV0KCdjaGVja3MnKTtcbiAgaWYgKCEhY2hlY2tzID09PSBmYWxzZSkge1xuICAgIGNvcmUuc2V0T3V0cHV0KCdzdGF0dXMnLCBmYWxzZSk7XG4gICAgY29yZS5zZXRGYWlsZWQoJ05vIGNoZWNrcy4nKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBDaGVja3MgYXJlIGEgSlNPTiBhcnJheS5cbiAgICBsZXQgcGFyc2VkQ2hlY2tzID0gSlNPTi5wYXJzZShjaGVja3MpIGFzIHN0cmluZ1tdO1xuICAgIGNvbnN0IHJlc3VsdCA9IF9jaGVja1B1bGxSZXF1ZXN0Rm9ybWF0KHBhcnNlZENoZWNrcywgYm9keSEhKTtcbiAgICBpZiAocmVzdWx0KSB7XG4gICAgICBjb3JlLmluZm8oYFBSIEZvcm1hdCBjaGVja3MgcGFzc2VkLmApO1xuICAgICAgY29yZS5zZXRPdXRwdXQoJ3N0YXR1cycsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3JlLmluZm8oYFBSIEZvcm1hdCBjaGVja3MgZmFpbGVkLmApO1xuICAgICAgY29yZS5zZXRPdXRwdXQoJ3N0YXR1cycsIGZhbHNlKTtcbiAgICAgIGNvcmUuc2V0RmFpbGVkKGBUaGUgcHVsbCByZXF1ZXN0ICR7Ym9keX0gZG9lcyBub3QgbWF0Y2ggb25lIG9mIHRoZSBmb2xsb3dpbmcgY2hlY2tzICR7Y2hlY2tzfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfY2hlY2tQdWxsUmVxdWVzdEZvcm1hdChleHByZXNzaW9uczogc3RyaW5nW10sIGJvZHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBjb25zdCBsaW5lcyA9IGJvZHkuc3BsaXQoUmVnRXhwKCdcXHI/XFxuJykpO1xuICBjb25zdCBjb21waWxlZCA9IFtdO1xuICBsZXQgbWF0Y2hlcyA9IDA7XG4gIC8vIEluZGV4ZXNcbiAgbGV0IGkgPSAwO1xuICBsZXQgaiA9IDA7XG4gIC8vIENvbXBpbGUgRXhwcmVzc2lvbnNcbiAgZm9yIChpID0gMDsgaSA8IGV4cHJlc3Npb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29tcGlsZWRbaV0gPSBuZXcgUmVnRXhwKGV4cHJlc3Npb25zW2ldKTtcbiAgfVxuICAvLyBWYWxpZGF0ZVxuICBmb3IgKGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xuICAgIGZvciAoaiA9IDA7IGogPCBjb21waWxlZC5sZW5ndGggJiYgbWF0Y2hlZCA9PT0gZmFsc2U7IGogKz0gMSkge1xuICAgICAgbWF0Y2hlZCA9IGNvbXBpbGVkW2pdLnRlc3QobGluZXNbaV0pO1xuICAgIH1cbiAgICBpZiAobWF0Y2hlZCkge1xuICAgICAgbWF0Y2hlcyArPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY29tcGlsZWQubGVuZ3RoID09PSBtYXRjaGVzO1xufVxuXG5cbihmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgY2hlY2tQdWxsUmVxdWVzdEZvcm1hdCgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvcmUuc2V0RmFpbGVkKGBVbmFibGUgdG8gdmFsaWRhdGUgcHVsbCByZXF1ZXN0IGJvZHkgJHtlcnJvcn1gKTtcbiAgfVxufSkoKTtcbiJdfQ==
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core = require("@actions/core");
var github = require("@actions/github");
function checkPullRequestFormat() {
    var workFlowPaylod = github.context.payload;
    var pullRequest = github.context.payload.pull_request;
    // Log the actual workflow payload for debugging
    core.info("Workflow payload " + JSON.stringify(workFlowPaylod));
    var body = pullRequest === null || pullRequest === void 0 ? void 0 : pullRequest.body;
    // Checks are performed only when we have a pull request body.
    if (!!pullRequest && !!body === false) {
        core.info("No pull request body. ");
        core.setFailed("No pull request body.");
        return;
    }
    var checks = core.getInput('checks');
    if (!!checks === false) {
        core.setOutput('status', false);
        core.setFailed('No checks.');
    }
    else {
        // Checks are a JSON array.
        var parsedChecks = JSON.parse(checks);
        var result = _checkPullRequestFormat(parsedChecks, body);
        if (result) {
            core.info("PR Format checks passed.");
            core.setOutput('status', true);
        }
        else {
            core.info("PR Format checks failed.");
            core.setOutput('status', false);
            core.setFailed("The pull request " + body + " does not match one of the following checks " + checks);
        }
    }
}
function _checkPullRequestFormat(expressions, body) {
    var lines = body.split(RegExp('\r?\n'));
    var compiled = [];
    var matches = 0;
    // Indexes
    var i = 0;
    var j = 0;
    // Compile Expressions
    for (i = 0; i < expressions.length; i += 1) {
        compiled[i] = new RegExp(expressions[i]);
    }
    // Validate
    for (i = 0; i < lines.length; i += 1) {
        var matched = false;
        for (j = 0; j < compiled.length && matched === false; j += 1) {
            matched = compiled[j].test(lines[i]);
        }
        if (matched) {
            matches += 1;
        }
    }
    return compiled.length === matches;
}
(function () {
    try {
        checkPullRequestFormat();
    }
    catch (error) {
        core.setFailed("Unable to validate pull request body " + error);
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBdUM7QUFDdkMsd0NBQTJDO0FBRTNDLFNBQVMsc0JBQXNCO0lBQzdCLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzlDLElBQU0sV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUV4RCxnREFBZ0Q7SUFDaEQsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUcsQ0FBQyxDQUFDO0lBRWhFLElBQU0sSUFBSSxHQUFHLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxJQUFJLENBQUM7SUFDL0IsOERBQThEO0lBQzlELElBQUksQ0FBQyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3hDLE9BQU87S0FDUjtJQUVELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQzlCO1NBQU07UUFDTCwyQkFBMkI7UUFDM0IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQWEsQ0FBQztRQUNsRCxJQUFNLE1BQU0sR0FBRyx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsSUFBTSxDQUFDLENBQUM7UUFDN0QsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7WUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDaEM7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLHNCQUFvQixJQUFJLG9EQUErQyxNQUFRLENBQUMsQ0FBQztTQUNqRztLQUNGO0FBQ0gsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsV0FBcUIsRUFBRSxJQUFZO0lBQ2xFLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3BCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNoQixVQUFVO0lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ1Ysc0JBQXNCO0lBQ3RCLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQzFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMxQztJQUNELFdBQVc7SUFDWCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNwQyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxJQUFJLE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1RCxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QztRQUNELElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxJQUFJLENBQUMsQ0FBQztTQUNkO0tBQ0Y7SUFDRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDO0FBQ3JDLENBQUM7QUFHRCxDQUFDO0lBQ0MsSUFBSTtRQUNGLHNCQUFzQixFQUFFLENBQUM7S0FDMUI7SUFBQyxPQUFPLEtBQUssRUFBRTtRQUNkLElBQUksQ0FBQyxTQUFTLENBQUMsMENBQXdDLEtBQU8sQ0FBQyxDQUFDO0tBQ2pFO0FBQ0gsQ0FBQyxDQUFDLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb3JlID0gcmVxdWlyZSgnQGFjdGlvbnMvY29yZScpO1xuaW1wb3J0IGdpdGh1YiA9IHJlcXVpcmUoJ0BhY3Rpb25zL2dpdGh1YicpO1xuXG5mdW5jdGlvbiBjaGVja1B1bGxSZXF1ZXN0Rm9ybWF0KCk6IHZvaWQge1xuICBjb25zdCB3b3JrRmxvd1BheWxvZCA9IGdpdGh1Yi5jb250ZXh0LnBheWxvYWQ7ICBcbiAgY29uc3QgcHVsbFJlcXVlc3QgPSBnaXRodWIuY29udGV4dC5wYXlsb2FkLnB1bGxfcmVxdWVzdDtcblxuICAvLyBMb2cgdGhlIGFjdHVhbCB3b3JrZmxvdyBwYXlsb2FkIGZvciBkZWJ1Z2dpbmdcbiAgY29yZS5pbmZvKGBXb3JrZmxvdyBwYXlsb2FkICR7SlNPTi5zdHJpbmdpZnkod29ya0Zsb3dQYXlsb2QpfWApO1xuXG4gIGNvbnN0IGJvZHkgPSBwdWxsUmVxdWVzdD8uYm9keTtcbiAgLy8gQ2hlY2tzIGFyZSBwZXJmb3JtZWQgb25seSB3aGVuIHdlIGhhdmUgYSBwdWxsIHJlcXVlc3QgYm9keS5cbiAgaWYgKCEhcHVsbFJlcXVlc3QgJiYgISFib2R5ID09PSBmYWxzZSkge1xuICAgIGNvcmUuaW5mbyhgTm8gcHVsbCByZXF1ZXN0IGJvZHkuIGApO1xuICAgIGNvcmUuc2V0RmFpbGVkKGBObyBwdWxsIHJlcXVlc3QgYm9keS5gKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgY2hlY2tzID0gY29yZS5nZXRJbnB1dCgnY2hlY2tzJyk7XG4gIGlmICghIWNoZWNrcyA9PT0gZmFsc2UpIHtcbiAgICBjb3JlLnNldE91dHB1dCgnc3RhdHVzJywgZmFsc2UpO1xuICAgIGNvcmUuc2V0RmFpbGVkKCdObyBjaGVja3MuJyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ2hlY2tzIGFyZSBhIEpTT04gYXJyYXkuXG4gICAgbGV0IHBhcnNlZENoZWNrcyA9IEpTT04ucGFyc2UoY2hlY2tzKSBhcyBzdHJpbmdbXTtcbiAgICBjb25zdCByZXN1bHQgPSBfY2hlY2tQdWxsUmVxdWVzdEZvcm1hdChwYXJzZWRDaGVja3MsIGJvZHkhISk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgY29yZS5pbmZvKGBQUiBGb3JtYXQgY2hlY2tzIHBhc3NlZC5gKTtcbiAgICAgIGNvcmUuc2V0T3V0cHV0KCdzdGF0dXMnLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29yZS5pbmZvKGBQUiBGb3JtYXQgY2hlY2tzIGZhaWxlZC5gKTtcbiAgICAgIGNvcmUuc2V0T3V0cHV0KCdzdGF0dXMnLCBmYWxzZSk7XG4gICAgICBjb3JlLnNldEZhaWxlZChgVGhlIHB1bGwgcmVxdWVzdCAke2JvZHl9IGRvZXMgbm90IG1hdGNoIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNoZWNrcyAke2NoZWNrc31gKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NoZWNrUHVsbFJlcXVlc3RGb3JtYXQoZXhwcmVzc2lvbnM6IHN0cmluZ1tdLCBib2R5OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgY29uc3QgbGluZXMgPSBib2R5LnNwbGl0KFJlZ0V4cCgnXFxyP1xcbicpKTtcbiAgY29uc3QgY29tcGlsZWQgPSBbXTtcbiAgbGV0IG1hdGNoZXMgPSAwO1xuICAvLyBJbmRleGVzXG4gIGxldCBpID0gMDtcbiAgbGV0IGogPSAwO1xuICAvLyBDb21waWxlIEV4cHJlc3Npb25zXG4gIGZvciAoaSA9IDA7IGkgPCBleHByZXNzaW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbXBpbGVkW2ldID0gbmV3IFJlZ0V4cChleHByZXNzaW9uc1tpXSk7XG4gIH1cbiAgLy8gVmFsaWRhdGVcbiAgZm9yIChpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IG1hdGNoZWQgPSBmYWxzZTtcbiAgICBmb3IgKGogPSAwOyBqIDwgY29tcGlsZWQubGVuZ3RoICYmIG1hdGNoZWQgPT09IGZhbHNlOyBqICs9IDEpIHtcbiAgICAgIG1hdGNoZWQgPSBjb21waWxlZFtqXS50ZXN0KGxpbmVzW2ldKTtcbiAgICB9XG4gICAgaWYgKG1hdGNoZWQpIHtcbiAgICAgIG1hdGNoZXMgKz0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvbXBpbGVkLmxlbmd0aCA9PT0gbWF0Y2hlcztcbn1cblxuXG4oZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIGNoZWNrUHVsbFJlcXVlc3RGb3JtYXQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb3JlLnNldEZhaWxlZChgVW5hYmxlIHRvIHZhbGlkYXRlIHB1bGwgcmVxdWVzdCBib2R5ICR7ZXJyb3J9YCk7XG4gIH1cbn0pKCk7XG4iXX0=